name: "Deploy to NuGet"

on:
  push:
    branches:
      - main

jobs: 
  deploy:
    name: 'Deploy'
    runs-on: 'ubuntu-latest'

    steps: 
    - name: 'Checkout'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 'Install .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.*'

    - name: 'Install GitVersion'
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'

    - name: 'Add GitVersion Config File'
      run: |
        echo "Creating GitVersion.yml with GitVersion Configuration File"
        cat <<EOF > GitVersion.yml
        mode: Mainline
        branches:
          main:
            regex: ^main$
            source-branches: []
            is-mainline: true
        EOF

    - name: 'Detect Changed Projects'
      id: detect-changes
      run: |
        echo "Detecting changes for projects..."
        find . -name "*.csproj" > all_projects.txt
        CHANGED_PROJECTS=""
        while IFS= read -r project_file; do
          project_dir=$(dirname "$project_file")
          if git diff --quiet HEAD^ HEAD -- "$project_dir/"; then
            echo "No changes in $project_dir"
          else
            echo "Changes detected in $project_dir"
            CHANGED_PROJECTS="$CHANGED_PROJECTS $project_file"
          fi
        done < all_projects.txt
        echo "CHANGED_PROJECTS=$CHANGED_PROJECTS" >> $GITHUB_ENV

    - name: 'Deploy Changed Projects'
      if: env.CHANGED_PROJECTS != ''
      env:
        CHANGED_PROJECTS: ${{ env.CHANGED_PROJECTS }}
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        for project_file in $CHANGED_PROJECTS; do
          echo "Processing $project_file"
          project_dir=$(dirname "$project_file")
          
          # Determine version for this project using GitVersion
          cd "$project_dir"
          gitversion_output=$(dotnet-gitversion /showvariable nugetVersionV2)
          PACKAGE_VERSION=$(echo "$gitversion_output" | tr -d '\r')
          cd -

          # Restore packages
          dotnet restore "$project_file" --configfile nuget.config

          # Build project
          dotnet build "$project_file" --no-restore --configuration Release

          # Pack project with version
          dotnet pack "$project_file" -p:PackageVersion=$PACKAGE_VERSION --no-restore --no-build --configuration Release --output ./nupkg

          # Publish package to NuGet
          dotnet nuget push ./nupkg/*.nupkg --source "https://api.nuget.org/v3/index.json" --api-key $NUGET_API_KEY
        done
